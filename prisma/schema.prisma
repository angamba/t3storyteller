// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
enum StoryStatus {
    CREATED   @map("CREATED")
    APPROVED  @map("APPROVED")
    PUBLISHED @map("PUBLISHED")
}

enum Role {
    ADMIN @map("ADMIN")
    POSTER  @map("POSTER")
    VIEWER @map("VIEWER")
}
generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model User {
    id        String     @id @default(cuid())
    name      String
    clerkId   String
    stories   Story[]
    role      Role       @default(VIEWER)
    followers Follower[] @relation("followers")
    following Follower[] @relation("following")
}

model Story {
    id          Int             @id @default(autoincrement())
    title       String
    content     String
    status      StoryStatus     @default(CREATED)
    published   Boolean         @default(false)
    createdAt   DateTime        @default(now())
    updatedAt   DateTime        @updatedAt
    createdBy   User            @relation(fields: [createdById], references: [id])
    createdById String
    keywords    KeywordOnPost[]

    @@index([createdById])
}

model Follower {
    id          Int    @id @default(autoincrement())
    follower    User   @relation("following", fields: [followerId], references: [id])
    followerId  String
    following   User   @relation("followers", fields: [followingId], references: [id])
    followingId String

    @@unique([followerId, followingId])
}

model Keyword {
    id      Int             @id @default(autoincrement())
    name    String          @unique
    stories KeywordOnPost[]
}

model KeywordOnPost {
    id        Int     @id @default(autoincrement())
    story     Story   @relation(fields: [storyId], references: [id])
    storyId   Int
    keyword   Keyword @relation(fields: [keywordId], references: [id])
    keywordId Int

    @@unique([storyId, keywordId])
}
